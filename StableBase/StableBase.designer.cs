#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StableBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StableBase")]
	public partial class StableBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHorse(Horse instance);
    partial void UpdateHorse(Horse instance);
    partial void DeleteHorse(Horse instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertHorseTask(HorseTask instance);
    partial void UpdateHorseTask(HorseTask instance);
    partial void DeleteHorseTask(HorseTask instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    #endregion
		
		public StableBaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StableBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StableBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StableBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StableBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StableBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Horse> Horses
		{
			get
			{
				return this.GetTable<Horse>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<HorseTask> HorseTasks
		{
			get
			{
				return this.GetTable<HorseTask>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Horse")]
	public partial class Horse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HorseID;
		
		private string _HorseName;
		
		private System.Data.Linq.Binary _HorsePicture;
		
		private decimal _HorseSize;
		
		private decimal _HorseWeight;
		
		private decimal _HorseRidingSchool;
		
		private decimal _HorseShowJumping;
		
		private decimal _HorseDressage;
		
		private decimal _HorseRacing;
		
		private EntitySet<HorseTask> _HorseTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHorseIDChanging(int value);
    partial void OnHorseIDChanged();
    partial void OnHorseNameChanging(string value);
    partial void OnHorseNameChanged();
    partial void OnHorsePictureChanging(System.Data.Linq.Binary value);
    partial void OnHorsePictureChanged();
    partial void OnHorseSizeChanging(decimal value);
    partial void OnHorseSizeChanged();
    partial void OnHorseWeightChanging(decimal value);
    partial void OnHorseWeightChanged();
    partial void OnHorseRidingSchoolChanging(decimal value);
    partial void OnHorseRidingSchoolChanged();
    partial void OnHorseShowJumpingChanging(decimal value);
    partial void OnHorseShowJumpingChanged();
    partial void OnHorseDressageChanging(decimal value);
    partial void OnHorseDressageChanged();
    partial void OnHorseRacingChanging(decimal value);
    partial void OnHorseRacingChanged();
    #endregion
		
		public Horse()
		{
			this._HorseTasks = new EntitySet<HorseTask>(new Action<HorseTask>(this.attach_HorseTasks), new Action<HorseTask>(this.detach_HorseTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HorseID
		{
			get
			{
				return this._HorseID;
			}
			set
			{
				if ((this._HorseID != value))
				{
					this.OnHorseIDChanging(value);
					this.SendPropertyChanging();
					this._HorseID = value;
					this.SendPropertyChanged("HorseID");
					this.OnHorseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string HorseName
		{
			get
			{
				return this._HorseName;
			}
			set
			{
				if ((this._HorseName != value))
				{
					this.OnHorseNameChanging(value);
					this.SendPropertyChanging();
					this._HorseName = value;
					this.SendPropertyChanged("HorseName");
					this.OnHorseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorsePicture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary HorsePicture
		{
			get
			{
				return this._HorsePicture;
			}
			set
			{
				if ((this._HorsePicture != value))
				{
					this.OnHorsePictureChanging(value);
					this.SendPropertyChanging();
					this._HorsePicture = value;
					this.SendPropertyChanged("HorsePicture");
					this.OnHorsePictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseSize", DbType="Decimal(4,2) NOT NULL")]
		public decimal HorseSize
		{
			get
			{
				return this._HorseSize;
			}
			set
			{
				if ((this._HorseSize != value))
				{
					this.OnHorseSizeChanging(value);
					this.SendPropertyChanging();
					this._HorseSize = value;
					this.SendPropertyChanged("HorseSize");
					this.OnHorseSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseWeight", DbType="Decimal(6,2) NOT NULL")]
		public decimal HorseWeight
		{
			get
			{
				return this._HorseWeight;
			}
			set
			{
				if ((this._HorseWeight != value))
				{
					this.OnHorseWeightChanging(value);
					this.SendPropertyChanging();
					this._HorseWeight = value;
					this.SendPropertyChanged("HorseWeight");
					this.OnHorseWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseRidingSchool", DbType="Decimal(4,2) NOT NULL")]
		public decimal HorseRidingSchool
		{
			get
			{
				return this._HorseRidingSchool;
			}
			set
			{
				if ((this._HorseRidingSchool != value))
				{
					this.OnHorseRidingSchoolChanging(value);
					this.SendPropertyChanging();
					this._HorseRidingSchool = value;
					this.SendPropertyChanged("HorseRidingSchool");
					this.OnHorseRidingSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseShowJumping", DbType="Decimal(4,2) NOT NULL")]
		public decimal HorseShowJumping
		{
			get
			{
				return this._HorseShowJumping;
			}
			set
			{
				if ((this._HorseShowJumping != value))
				{
					this.OnHorseShowJumpingChanging(value);
					this.SendPropertyChanging();
					this._HorseShowJumping = value;
					this.SendPropertyChanged("HorseShowJumping");
					this.OnHorseShowJumpingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseDressage", DbType="Decimal(4,2) NOT NULL")]
		public decimal HorseDressage
		{
			get
			{
				return this._HorseDressage;
			}
			set
			{
				if ((this._HorseDressage != value))
				{
					this.OnHorseDressageChanging(value);
					this.SendPropertyChanging();
					this._HorseDressage = value;
					this.SendPropertyChanged("HorseDressage");
					this.OnHorseDressageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseRacing", DbType="Decimal(4,2) NOT NULL")]
		public decimal HorseRacing
		{
			get
			{
				return this._HorseRacing;
			}
			set
			{
				if ((this._HorseRacing != value))
				{
					this.OnHorseRacingChanging(value);
					this.SendPropertyChanging();
					this._HorseRacing = value;
					this.SendPropertyChanged("HorseRacing");
					this.OnHorseRacingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Horse_HorseTask", Storage="_HorseTasks", ThisKey="HorseID", OtherKey="HorseID")]
		public EntitySet<HorseTask> HorseTasks
		{
			get
			{
				return this._HorseTasks;
			}
			set
			{
				this._HorseTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HorseTasks(HorseTask entity)
		{
			this.SendPropertyChanging();
			entity.Horse = this;
		}
		
		private void detach_HorseTasks(HorseTask entity)
		{
			this.SendPropertyChanging();
			entity.Horse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private EntitySet<HorseTask> _HorseTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    #endregion
		
		public Task()
		{
			this._HorseTasks = new EntitySet<HorseTask>(new Action<HorseTask>(this.attach_HorseTasks), new Action<HorseTask>(this.detach_HorseTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_HorseTask", Storage="_HorseTasks", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<HorseTask> HorseTasks
		{
			get
			{
				return this._HorseTasks;
			}
			set
			{
				this._HorseTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HorseTasks(HorseTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_HorseTasks(HorseTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HorseTask")]
	public partial class HorseTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HorseTaskID;
		
		private int _HorseID;
		
		private int _TaskID;
		
		private bool _HorseTaskIsDaily;
		
		private bool _HorseTaskIsMorning;
		
		private System.Nullable<System.DateTime> _HorseTaskStartDate;
		
		private System.Nullable<System.DateTime> _HorseTaskEndDate;
		
		private string _HorseTaskNotes;
		
		private EntityRef<Horse> _Horse;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHorseTaskIDChanging(int value);
    partial void OnHorseTaskIDChanged();
    partial void OnHorseIDChanging(int value);
    partial void OnHorseIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnHorseTaskIsDailyChanging(bool value);
    partial void OnHorseTaskIsDailyChanged();
    partial void OnHorseTaskIsMorningChanging(bool value);
    partial void OnHorseTaskIsMorningChanged();
    partial void OnHorseTaskStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHorseTaskStartDateChanged();
    partial void OnHorseTaskEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHorseTaskEndDateChanged();
    partial void OnHorseTaskNotesChanging(string value);
    partial void OnHorseTaskNotesChanged();
    #endregion
		
		public HorseTask()
		{
			this._Horse = default(EntityRef<Horse>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HorseTaskID
		{
			get
			{
				return this._HorseTaskID;
			}
			set
			{
				if ((this._HorseTaskID != value))
				{
					this.OnHorseTaskIDChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskID = value;
					this.SendPropertyChanged("HorseTaskID");
					this.OnHorseTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseID", DbType="Int NOT NULL")]
		public int HorseID
		{
			get
			{
				return this._HorseID;
			}
			set
			{
				if ((this._HorseID != value))
				{
					if (this._Horse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHorseIDChanging(value);
					this.SendPropertyChanging();
					this._HorseID = value;
					this.SendPropertyChanged("HorseID");
					this.OnHorseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskIsDaily", DbType="Bit NOT NULL")]
		public bool HorseTaskIsDaily
		{
			get
			{
				return this._HorseTaskIsDaily;
			}
			set
			{
				if ((this._HorseTaskIsDaily != value))
				{
					this.OnHorseTaskIsDailyChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskIsDaily = value;
					this.SendPropertyChanged("HorseTaskIsDaily");
					this.OnHorseTaskIsDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskIsMorning", DbType="Bit NOT NULL")]
		public bool HorseTaskIsMorning
		{
			get
			{
				return this._HorseTaskIsMorning;
			}
			set
			{
				if ((this._HorseTaskIsMorning != value))
				{
					this.OnHorseTaskIsMorningChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskIsMorning = value;
					this.SendPropertyChanged("HorseTaskIsMorning");
					this.OnHorseTaskIsMorningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HorseTaskStartDate
		{
			get
			{
				return this._HorseTaskStartDate;
			}
			set
			{
				if ((this._HorseTaskStartDate != value))
				{
					this.OnHorseTaskStartDateChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskStartDate = value;
					this.SendPropertyChanged("HorseTaskStartDate");
					this.OnHorseTaskStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HorseTaskEndDate
		{
			get
			{
				return this._HorseTaskEndDate;
			}
			set
			{
				if ((this._HorseTaskEndDate != value))
				{
					this.OnHorseTaskEndDateChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskEndDate = value;
					this.SendPropertyChanged("HorseTaskEndDate");
					this.OnHorseTaskEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorseTaskNotes", DbType="NVarChar(MAX)")]
		public string HorseTaskNotes
		{
			get
			{
				return this._HorseTaskNotes;
			}
			set
			{
				if ((this._HorseTaskNotes != value))
				{
					this.OnHorseTaskNotesChanging(value);
					this.SendPropertyChanging();
					this._HorseTaskNotes = value;
					this.SendPropertyChanged("HorseTaskNotes");
					this.OnHorseTaskNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Horse_HorseTask", Storage="_Horse", ThisKey="HorseID", OtherKey="HorseID", IsForeignKey=true)]
		public Horse Horse
		{
			get
			{
				return this._Horse.Entity;
			}
			set
			{
				Horse previousValue = this._Horse.Entity;
				if (((previousValue != value) 
							|| (this._Horse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Horse.Entity = null;
						previousValue.HorseTasks.Remove(this);
					}
					this._Horse.Entity = value;
					if ((value != null))
					{
						value.HorseTasks.Add(this);
						this._HorseID = value.HorseID;
					}
					else
					{
						this._HorseID = default(int);
					}
					this.SendPropertyChanged("Horse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_HorseTask", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.HorseTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.HorseTasks.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private System.DateTime _NewsDate;
		
		private string _NewsText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnNewsDateChanging(System.DateTime value);
    partial void OnNewsDateChanged();
    partial void OnNewsTextChanging(string value);
    partial void OnNewsTextChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsDate", DbType="DateTime NOT NULL")]
		public System.DateTime NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsText
		{
			get
			{
				return this._NewsText;
			}
			set
			{
				if ((this._NewsText != value))
				{
					this.OnNewsTextChanging(value);
					this.SendPropertyChanging();
					this._NewsText = value;
					this.SendPropertyChanged("NewsText");
					this.OnNewsTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
